// @flow

import type { Node, ComponentType } from 'react';

declare export var MODE: {| RENDER: string, HYDRATE: string |};

declare export var SETTINGS: {|
  CURRENT_MODE: typeof MODE.RENDER | typeof MODE.HYDRATE,
|};

declare export var LooselyLazy: {|
  init: (mode: typeof SETTINGS.CURRENT_MODE) => void,
|};

declare export default typeof LooselyLazy;

type ImportDefaultComponent = {
  default: ComponentType<any>,
};

declare export function Loader(): Promise<ImportDefaultComponent>;

type LazyComponent = any;

declare export function LazySuspense(props: {|
  children: Node,
  fallback: Node,
|}): Node;

declare export function lazyForPaint(
  loader: typeof Loader,
  opts?: any
): LazyComponent;

declare export function lazyAfterPaint(
  loader: typeof Loader,
  opts?: any
): LazyComponent;

declare export function lazy(loader: typeof Loader, opts?: any): LazyComponent;

declare export function LazyWait(props: {|
  until: boolean,
  children: Node,
|}): Node;

declare export function useLazyPhase(): {|
  startNextPhase: () => void,
  resetPhase: () => void,
|};
