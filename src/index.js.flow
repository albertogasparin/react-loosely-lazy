// @flow strict

import type { Node, ComponentType } from 'react';
import type { Asset, Manifest } from './webpack';

export type { Asset, Manifest };

declare export var MODE: {
  RENDER: string,
  HYDRATE: string,
};

declare export var SETTINGS: {
  CURRENT_MODE: typeof MODE.RENDER | typeof MODE.HYDRATE,
};

declare export var LooselyLazy: {
  init(mode: typeof SETTINGS.CURRENT_MODE): void,
};

declare export default typeof LooselyLazy;

export type LazyComponent<P> = ComponentType<P> & {
  getAssetUrls(manifest: Manifest): string[] | void,
  preload(): void,
};

type Options = {
  ssr?: boolean,
  defer?: number,
  moduleId?: string,
};

export type LazySuspenseProps = {
  children?: ?Node,
  fallback: Node,
};

declare export var LazySuspense: ComponentType<LazySuspenseProps>;

export type ImportDefaultComponent<P> = {
  default: ComponentType<P>,
  ...
};

export type ClientLoader<P> = () => Promise<
  ImportDefaultComponent<P> | ComponentType<P>
>;

export type ServerLoader<P> = () =>
  | ImportDefaultComponent<P>
  | ComponentType<P>;

// TODO: Reinstate ServerLoader<P> whenever flow better supports dynamic imports
export type Loader<P> = ClientLoader<P>; // | ServerLoader<P>;

export type { Options as LazyOptions };

declare export function lazyForPaint<P>(
  loader: Loader<P>,
  opts?: Options
): LazyComponent<P>;

declare export function lazyAfterPaint<P>(
  loader: Loader<P>,
  opts?: Options
): LazyComponent<P>;

declare export function lazy<P>(
  loader: Loader<P>,
  opts?: Options
): LazyComponent<P>;

export type LazyWaitProps = {
  until: boolean,
  children: Node,
};

declare export var LazyWait: ComponentType<LazyWaitProps>;

declare export function useLazyPhase(): {
  startNextPhase(): void,
  resetPhase(): void,
};
